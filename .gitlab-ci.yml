image:
  name: hashicorp/terraform:1.0.5
  entrypoint:
  - '/usr/bin/env'
  - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

variables:
  PLAN: plan.tfplan

.gitlab_tf_backend: &gitlab_tf_backend
  - export TF_ADDRESS=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/develop
  - export TF_HTTP_ADDRESS=${TF_ADDRESS}
  - export TF_HTTP_LOCK_ADDRESS=${TF_ADDRESS}/lock
  - export TF_HTTP_LOCK_METHOD=POST
  - export TF_HTTP_UNLOCK_ADDRESS=${TF_ADDRESS}/lock
  - export TF_HTTP_UNLOCK_METHOD=DELETE
  - export TF_HTTP_USERNAME=plinio.gsnascimento@gmail.com
  - export TF_HTTP_PASSWORD=${CI_JOB_TOKEN}
  - export TF_HTTP_RETRY_WAIT_MIN=5
  - echo "Using HTTP Backend at $TF_HTTP_ADDRESS"
  - terraform --version
  - terraform init -reconfigure

stages:          # List of stages for jobs, and their order of execution
  - validate
  - plan
  - apply

merge review:
  stage: validate
  script:
    - *gitlab_tf_backend
    - terraform validate
    - terraform fmt -check=true
  only:
    - merge_requests

plan: 
  stage: plan
  script:
    - *gitlab_tf_backend
    - terraform plan -out=$PLAN -var-file=./environments/dev.tfvars
  only:
    - merge_requests
  artifacts:
    name: plan
    paths:
      - $PLAN

apply:
  stage: apply
  # when: manual
  script:
    - *gitlab_tf_backend
    - terraform apply -auto-approve -var-file=./environments/dev.tfvars
  environment: 
    name: develop
  # rules:
  #   - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == develop
